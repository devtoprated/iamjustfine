import { HealthStatus } from 'src/entity/health-status.entity';
import { Users } from 'src/entity/user.entity';
import { NotificationService } from 'src/notification/notification.service';
import { Connection, Repository } from 'typeorm';
import { Invitation } from 'src/entity/invitation.entity';
import { UserMonitor } from 'src/entity/user-monitor.entity';
import { Notification } from 'src/entity/notification.entity';
import { Setting } from 'src/entity/setting.entity';
import { NotificationLog } from 'src/entity/notification-log.entity';
import { Plans } from 'src/entity/plans.entity';
import { MultipleUserSubscription } from 'src/entity/multipleUserSubscription.entity';
import { Subscription } from 'src/entity/subscription.entity';
export declare class UsersService {
    private healthRepository;
    private userRespository;
    private invitationRespository;
    private helperRepository;
    private notificationRepository;
    private notificationService;
    private settingRepository;
    private PlansRepository;
    private multiSubscriptionUsersRepository;
    private SubscriptionRepository;
    private notificationLogRepository;
    private readonly connection;
    constructor(healthRepository: Repository<HealthStatus>, userRespository: Repository<Users>, invitationRespository: Repository<Invitation>, helperRepository: Repository<UserMonitor>, notificationRepository: Repository<Notification>, notificationService: NotificationService, settingRepository: Repository<Setting>, PlansRepository: Repository<Plans>, multiSubscriptionUsersRepository: Repository<MultipleUserSubscription>, SubscriptionRepository: Repository<Subscription>, notificationLogRepository: Repository<NotificationLog>, connection: Connection);
    checkin(req: any, res: any, loginUser: any): Promise<unknown>;
    updateHealthStatus(userId: any): Promise<import("typeorm").UpdateResult>;
    delHealthStatus(userId: any): Promise<import("typeorm").DeleteResult>;
    getProfile(req: any, loginUser: any): Promise<unknown>;
    updateProfile(req: any, img: any, res: any, userId: any): Promise<unknown>;
    changeCheckInStatus(req: any, res: any, loginUser: any): Promise<unknown>;
    pushNotificationToMyFollowers(loginUserId: any, currHealth: any): Promise<void>;
    followerList(loginUserId: any): Promise<any>;
    logoutUser(req: any, res: any, loginUser: any): Promise<unknown>;
    deleteAccount(loginUser: any, res: any): Promise<unknown>;
    notCheckinUsersCron(): Promise<void>;
    getUserCount(): Promise<number>;
    getFollowerList(loginUserId: any): Promise<{
        userIds: any[];
    }>;
    sendDemoPushNotification(dto: any): Promise<void>;
    deleteUserAccount(contactNumber: string, dialCode: string, req: any, res: any): Promise<void>;
}
