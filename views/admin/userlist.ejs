<!-- Include necessary CSS file for DataTables -->
<!-- <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.25/css/jquery.dataTables.css">
  <link rel="stylesheet" href="<%=nodeSiteUrl%>/css/bootstrap.min.css" />
  <link rel="stylesheet" href="<%=nodeSiteUrl %>/css/bootstrap.min.css" /> -->

<%- include ('./elements/header.ejs') %>

  <div class="main-content">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-12 buttonsadduser">
          <button type="button" id = "importbulk" class="btn btn-primary" data-toggle="modal" data-target="#importModal">
            Import Bulk Users
          </button>
          <button id="addUserButton" class="btn btn-primary">Add User</button>
        </div>
      </div>
    </div>

    <!-- Bootstrap Modal for Importing CSV -->
    <div class="modal" id="importModal" tabindex="-1" role="dialog" aria-labelledby="importModalLabel"
      aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h3 class="modal-title" id="importModalLabel">Import CSV File</h3>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>

          <div class="modal-body importModelLink">
            <form id="uploadForm" enctype="multipart/form-data">
              <div class="form-group drop-area" style="text-align: center">
                <label for="fileInput" class="btn-3">
                  <span class="select-button">Choose a File</span>
                </label>
                <input class="form-control" type="file" name="file" class="form-control-file" id="fileInput" required
                  accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" />
                <span id="fileNameDisplay">No file chosen, yet.</span>
              </div>
            </form>
            <div class="demoCsv">
              <a href="<%=process.env.nodeAdminUrl%>/download/demo/csv" download="data.csv">Click here to download demo
                CSV file</a>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">
              Close
            </button>
            <button type="button" class="btn btn-primary" id="importBtn">
              Import
            </button>
          </div>
        </div>
      </div>
    </div>

    <div id="flashMessage" class="alert alert-success" style="display: none"></div>

    <div id="addUserPopup" class="modal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h2 class="modal-title">Add User</h2>
            <button type="button" class="btn-close btnclose" data-bs-dismiss="modal" aria-label="Close">
              X
            </button>
          </div>
          <div class="modal-body">
            <form>
              <div class="mb-3">
                <label for="exampleInputEmail1" class="form-label">Name</label>
                <input type="text" style="color:black" id="NameInput" maxlength="100" class="form-control"
                  aria-describedby="emailHelp" placeholder="Name" />
                <div class="invalid-feedback" id="nameError" style="
                    color: red;
                    font-size: 14px;
                    font-weight: bold;
                    display: none;
                  "></div>
              </div>
              <br />

              <div class="mb-3 d-flex">
                <label for="exampleInputPassword1" class="form-label">Contact Number </label> <br>
                <input type="tel" class="form-control" id="dialCode" value="+1">
                <div class="invalid-feedback" id="dialCodeError"
                  style="color: red; font-size: 14px; font-weight: bold; display: none;"></div>
                <input type="number" class=" " pattern="[0-9]+"
                  title="Please enter only digits (0-9) for the contact number." id="contactNumberInput"
                  placeholder="Contact Number" />
                <div class="invalid-feedback" id="contactNumberError" style="
                    color: red;
                    font-size: 14px;
                    font-weight: bold;
                    display: none;
                  "></div>
              </div><br />

              <div class="mb-3">
                <label for="isApprovedByAdmin">Status</label>
                <fieldset>
                  <select id="isApprovedByAdmin" name="isApprovedByAdmin">
                    <option value="1">Approved </option>
                    <option value="0">Not Approved</option>
                  </select><br><br>
                </fieldset>
              </div>
              <br />

              <div id="errorMessages" class="alert alert-danger" style="display: none"></div>

              <div class="modal-footer">
                <button type="button" id="saveUserButton" class="btn btn-primary">
                  Submit
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
    <table id="userTable">
      <thead>
        <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Dial Code</th>
          <th>Contact Number</th>
          <th>Status</th>
          <th>Registration Date</th>
          <th>Account Verified</th>
          <th>Action</th>
        </tr>
      </thead>

      <tbody id="userTable"></tbody>
    </table>
  </div>

  <%- include ('./elements/footer.ejs') %>
    <!-- Include necessary JavaScript files for DataTables and jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.25/js/jquery.dataTables.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.x.x/dist/js/bootstrap.bundle.min.js"></script>

    <script>
      const dropArea = document.querySelector('.drop-area');
      const fileNameDisplay = document.getElementById('fileNameDisplay');
      const fileInput = document.getElementById('fileInput');

      fileInput.addEventListener('change', () => {
        const file = fileInput.files[0];
        if (file) {
          fileNameDisplay.textContent = file.name;
        } else {
          fileNameDisplay.textContent = 'No file selected';
        }
      });

      dropArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropArea.classList.add('dragover');
      });

      dropArea.addEventListener('dragleave', () => {
        dropArea.classList.remove('dragover');
      });

      dropArea.addEventListener('drop', (e) => {
        e.preventDefault();
        dropArea.classList.remove('dragover');

        const file = e.dataTransfer.files[0];
        if (file) {
          fileInput.files = e.dataTransfer.files;
          fileNameDisplay.textContent = file.name;
        } else {
          fileNameDisplay.textContent = 'No file selected';
        }
      });
    </script>

    <script>
      document
        .getElementById('saveUserButton')
        .addEventListener('click', function () {
          // Get input values
          const name = document.getElementById('NameInput').value.trim();
          const contactNumber = document
            .getElementById('contactNumberInput')
            .value.trim();
          const dialCode = document.getElementById('dialCode').value.trim();

          // Hide all error messages
          document.getElementById('nameError').style.display = 'none';
          document.getElementById('contactNumberError').style.display = 'none';
          document.getElementById('dialCodeError').style.display = 'none';
          document.getElementById('errorMessages').style.display = 'none';

          // Perform custom validations
          let valid = true;
          if (name === '') {
            document.getElementById('nameError').innerHTML = 'Name is required.';
            document.getElementById('nameError').style.display = 'block';
            valid = false;
          }

          if (contactNumber === '') {
            document.getElementById('contactNumberError').innerHTML =
              'Contact Number is required.';
            document.getElementById('contactNumberError').style.display = 'block';
            valid = false;
          } else if (!/^\d{10}$/.test(contactNumber)) {
            document.getElementById('contactNumberError').innerHTML =
              'Contact Number must be exactly 10 digits.';
            document.getElementById('contactNumberError').style.display = 'block';
            valid = false;
          }

          if (dialCode === '') {
            document.getElementById('dialCodeError').innerHTML =
              'Dial Code is required.';
            document.getElementById('dialCodeError').style.display = 'block';
            valid = false;
          } else if (!/^\+\d{2}$/.test(dialCode)) {
            // document.getElementById('dialCodeError').innerHTML =
            //   'Dial Code must start with "+" and be followed by exactly 2 digits.';
            // document.getElementById('dialCodeError').style.display = 'block';
            // valid = false;
          }

          if (name !== '' && !/^[A-Za-z]+$/.test(name)) {
            //errorMessages.push('Name must contain only alphabetic characters.');
          }

          if (!valid) {
            // Prevent form submission if there are errors
            return;
          }

          // Clear the error messages div if there were no errors
          document.getElementById('errorMessages').style.display = 'none';
        });

      function showMessage(message) {
        $('#message').text(message);
      }

      $(document).ready(function () {
        // Handle the form submission for CSV file
        $('#importBtn').on('click', function (event) {
          event.preventDefault(); // Prevent the default form submission behavior
          const fileInput = document.getElementById('fileInput');
          const file = fileInput.files[0];
          const formData = new FormData();
          formData.append('file', file);
          // Make an AJAX call to upload the file to the backend
          $.ajax({
            type: 'POST',
            url: '<%=process.env.nodeAdminUrl%>/csv/upload', // Replace with the actual URL for file upload (endpoint on the backend)
            data: formData,
            contentType: false,
            processData: false,
            success: function (data) {
              Swal.fire(data.message);
              // Handle the response from the backend
              if (data.message == 'Users inserted successfully') {
                // alert('File uploaded successfully: ' + data.message);

                // Redirect to the admin user list page after the user clicks 'OK'
                setTimeout(function () {
                  window.location.href = '<%=process.env.nodeAdminUrl%>/userlist'; // Replace 'userlist' with the actual URL for admin user list page
                }, 1500); // Delay for 100 milliseconds (adjust this value if needed)
              } else {
                showMessage('Error uploading file: ' + data.message);
              }
            },
            error: function (error) {
              console.error('Error uploading file:', error);
              showMessage('Error uploading file. Please try again.');
            },
          });
        });

        // Add User Functionality in add user button
        $('#addUserButton').click(function () {
          $('#addUserPopup').modal('show');
        });

        $('#importbulk').click(function () {
          $('#importModal').modal('show');
        });


        $('#saveUserButton').click(function () {
          const name = $('#NameInput').val().trim();
          const contactNumber = $('#contactNumberInput').val().trim();
          const dialCode = $('#dialCode').val().trim();
          const isApprovedByAdmin = $('#isApprovedByAdmin').val().trim();


          // Hide all error messages
          document.getElementById('nameError').style.display = 'none';
          document.getElementById('contactNumberError').style.display = 'none';
          document.getElementById('dialCodeError').style.display = 'none';
          document.getElementById('errorMessages').style.display = 'none';

          // Perform custom validations
          let valid = true;
          const errorMessages = [];

          if (name === '') {
            $('#nameError').html('Name is required.').show();
            valid = false;
          } else if (!/^[A-Za-z]+$/.test(name)) {
            // $('#nameError').html('Name must contain only alphabetic characters.').show();
            //valid = false;
          }


          if (contactNumber === '') {
            document.getElementById('contactNumberError').innerHTML = 'Contact Number is required.';
            document.getElementById('contactNumberError').style.display = 'block';
            valid = false;
          }
          // } else if (!/^\d{10}$/.test(contactNumber)) {
          //   document.getElementById('contactNumberError').innerHTML = 'Contact Number must be exactly 10 digits.';
          //   document.getElementById('contactNumberError').style.display = 'block';
          //   valid = false;
          // }

          if (dialCode === '') {
            document.getElementById('dialCodeError').innerHTML = 'Dial Code is required.';
            document.getElementById('dialCodeError').style.display = 'block';
            valid = false;
          } else if (!/^\+\d{1}$/.test(dialCode)) {
            /*document.getElementById('dialCodeError').innerHTML = 'Dial Code must start with "+" and be followed by exactly 2 digits.';
            document.getElementById('dialCodeError').style.display = 'block';
            valid = false;*/
          }

          if (errorMessages.length > 0) {
            const errorMessageHTML = '<ul>' + errorMessages.map(message => `<li>${message}</li>`).join('') + '</ul>';
            $('#errorMessages').html(errorMessageHTML).show();
            valid = false;
          }

          // Perform other validations for contactNumber and dialCode fields...
          if (!valid) {
            // Prevent form submission if there are errors
            return;
          }

          const newUser = {
            name,
            contactNumber,
            dialCode,
            isApprovedByAdmin
          };

          $.ajax({
            type: 'POST',
            url: `<%=process.env.nodeAdminUrl%>/add/user`,
            data: newUser,
            dataType: 'json',
            success: function (data) {
              Swal.fire(
                'Good job!',
                'User created successfully!',
                'success'
              )
              $('#addUserPopup').modal('hide');
              setTimeout(function () {
                window.location.href = '<%=process.env.nodeAdminUrl%>/userlist';
              }, 2000);
            },
            error: function (xhr, status, error) {
              console.error('AJAX Error:', error);
              // Handle error if needed
            }
          });
        });

        function deactivateUser(userId) {
          // Show a confirmation dialog to the user
          const confirmed = confirm('Do you want to deactivate this user?');
          console.log('userId', userId);

          if (confirmed) {
            // User confirmed, proceed with the deactivation
            $.ajax({
              type: 'PUT',
              url: `/deactivate/${userId}`, // Replace with the actual URL for user deactivation
              success: function (data) {
                alert(data.message);
              },
              error: function (error) {
                console.error('An error occurred during user deactivation:', error);
                // Handle error (e.g., show an error message to the user)
              },
            });
          } else {
            console.log('User canceled deactivation.');
          }
        }

        // Make the deactivateUser function available globally
        window.deactivateUser = deactivateUser;


        // Function to handle the delete button click
        function deleteUser(userId) {
          // Show a confirmation dialog to the userswa
          //const confirmed = Swal('Do you want to delete this user?');

          Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
          }).then((result) => {
            if (result.isConfirmed) {

              // User confirmed, proceed with the deletion
              $.ajax({
                type: 'DELETE',
                url: `<%=process.env.nodeAdminUrl%>/users${userId}`,
                // Correct the URL to include the actual userId
                success: function (data) {
                  Swal.fire(
                    data.message,
                    'You clicked the button!',
                    'success'
                  )
                  if (data.message === 'User deleted successfully') {
                    setTimeout(function () {
                      window.location.href = '<%=process.env.nodeAdminUrl%>/userlist';
                    }, 2000);
                  }
                },
                error: function (error) {
                  console.error('An error occurred during user deletion:', error);
                  // Handle error (e.g., show an error message to the user)
                }
              });
            }
          });
        }

        // Make the deleteUser function available globally
        window.deleteUser = deleteUser;

        $.ajax({
          type: 'Get',
          dataType: 'json',
          url: 'table',
          success: function (data) {
            createDatatablesrcData(data);
          },
        });
      });

      $(document).ready(function () {
        var srcData = JSON.parse(`<%- srcData %>`); // Parse the JSON string to an array of objects

        $('#userTable').DataTable({
          pageLength: 10,
          data: srcData,
          dom: 'Bfrtip', // Add the Buttons to the toolbar
          buttons: [
            'copy',
            'csv',
            'excel',
            'pdf',
            'print', // Built-in Buttons
            {
              text: 'Import', // Custom Import Button
              action: function (e, dt, node, config) {
                // Handle your import logic here
                alert('Import button clicked!');
              },
            },
          ],
          columns: [
            {
              data: null, // Use null data source for this column
              render: function (data, type, row, meta) {
                // Render the serial number using the row index
                return meta.row + 1;
              },
            },
            // { data: 'id' },
            { data: 'name' },

            { data: 'dialCode' },
            { data: 'contactNumber' },

            // {
            //   data: 'isApprovedByAdmin',
            //   render: function (data, type, row) {
            //     return data == 1 ? 'Approved' : 'Not Approved'; // Render "Yes" if 1, "No" if 0
            //   },
            // },

            {
              data: 'status', // Assuming 'status' is the field name in your data
              title: 'Status',
              render: function (data, type, row) {
                // 'data' is the value of the 'status' field
                // Return the dropdown HTML with selected option based on the current value
                return `<select class="status-dropdown" data-id="${row.id}">
                        <option value="1" ${row.isApprovedByAdmin == 1 ? 'selected' : ''
                  }>Approved</option>
                        <option value="0" ${row.isApprovedByAdmin == 0 ? 'selected' : ''
                  }>Not Approved</option>
                    </select>`;
              },
            },

            {
              data: 'isVerified', // Assuming 'status' is the field name in your data
              title: 'Account Verified',
              render: function (data, type, row) {
                // 'data' is the value of the 'status' field
                // Return the dropdown HTML with selected option based on the current value
                return `${row.isVerified == true ? 'Yes' : 'No'}`;
              },
            },

            {
              data: 'createdAt',
              render: function (data, type, row) {
                return moment(data).format('YYYY-MM-DD HH:mm:ss A');
              },
            },
            {
              data: null,
              render: function (data, type, row) {
                return `
                    <a href="<%=process.env.nodeAdminUrl%>/edituser/${data.id}" class="btn btn-primary btn-sm" onclick="editUser(${data.id})">
                      <i class="fas fa-edit"  title="Edit User"></i>
                    </a>
                    <a class="btn btn-danger btn-sm" onclick="deleteUser('${data.id}')">
                  <i class="fas fa-trash"  title="Delete User" ></i>
                </a>
  
                    <a href="<%=process.env.nodeAdminUrl%>/views${data.id}" class="btn btn-secondary btn-sm" onclick="views(${data.id})"   title="View User" >
                           <i class="fas fa-eye"></i> <!-- Updated Font Awesome class and icon -->
                      </a>
                      </button>
                  `;
              },
            },
          ],
        });
      });

      // Upload Editor - triggered from the import button. Used only for uploading a file to the browser

      // Handle dropdown change event to update data in the database
      $(document).on('change', '.status-dropdown', function () {
        const selectedOption = $(this).val();
        const dataId = $(this).data('id');

        console.log({ selectedOption }, { dataId });

        // Use AJAX to update the data in the database
        $.ajax({
          url: 'update/user/status',
          method: 'POST', // Use POST or PUT, depending on your server-side update method
          data: { id: dataId, status: selectedOption },
          success: function (response) {
            // Handle the response if needed
            console.log('Update successful');
          },
          error: function (error) {
            console.error('Error updating data:', error);
          },
        });
      });
    </script>